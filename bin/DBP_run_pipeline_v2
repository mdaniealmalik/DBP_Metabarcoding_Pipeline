#!/usr/bin/env bash

# =================== DEFAULT PARAMETERS ===================
quality_threshold=12
min_length=180
max_length=320

primer_fwd="TTTCTGTTGGTGCTGATATTGCGCCGGTAAAACTCGTGCCAGC"
primer_rev="ACTTGCCTGTCGCTCTATCTTCCATAGTGGGGTATCTAATCCCAGTTTG"
cutadapt_error=0.2
cutadapt_minlen=150
cutadapt_maxlen=200

vsearch_id=0.97
blast_evalue=0.001
blast_identity=97
blast_qcov=90
blast_max_target=25
threads=4

# =================== ARGUMENT PARSING ===================
while [[ "$#" -gt 0 ]]; do
  case "$1" in
    --help|-h)
      echo ""
      echo "🧬 DBP_run_pipeline_v2 - MinION eDNA Metabarcoding Pipeline"
      echo "--------------------------------------------------------"
      echo "Usage: DBP_run_pipeline_v2 [options]"
      echo ""
      echo "NanoFilt options:"
      echo "  -q                Minimum quality score (default: 10)"
      echo "  -l                Minimum read length (default: 180)"
      echo "  -L                Maximum read length (default: 320)"
      echo ""
      echo "Cutadapt options:"
      echo "  --primer-fwd      Forward primer sequence"
      echo "  --primer-rev      Reverse primer sequence"
      echo "  --cutadapt-error  Max error rate for primer match (default: 0.2)"
      echo "  --cutadapt-minlen Minimum length after trimming (default: 150)"
      echo "  --cutadapt-maxlen Maximum length after trimming (default: 200)"
      echo ""
      echo "VSEARCH options:"
      echo "  --vsearch-id      OTU clustering identity threshold (default: 0.95)"
      echo ""
      echo "BLASTn options:"
      echo "  --blast-evalue    E-value threshold (default: 0.001)"
      echo "  --blast-identity  Minimum percent identity (default: 90)"
      echo "  --blast-qcov      Minimum query coverage (default: 90)"
      echo "  --max_target_seqs  Maximum target seqs to blast (default: 25)"
      echo ""
      echo "General options:"
      echo "  -t                Number of threads to use (default: 4)"
      echo "  --help            Show this help message and exit"
      echo ""
      exit 0
      ;;
    -q) quality_threshold="$2"; shift ;;
    -l) min_length="$2"; shift ;;
    -L) max_length="$2"; shift ;;
    --primer-fwd) primer_fwd="$2"; shift ;;
    --primer-rev) primer_rev="$2"; shift ;;
    --cutadapt-error) cutadapt_error="$2"; shift ;;
    --cutadapt-minlen) cutadapt_minlen="$2"; shift ;;
    --cutadapt-maxlen) cutadapt_maxlen="$2"; shift ;;
    --vsearch-id) vsearch_id="$2"; shift ;;
    --blast-evalue) blast_evalue="$2"; shift ;;
    --blast-identity) blast_identity="$2"; shift ;;
    --blast-qcov) blast_qcov="$2"; shift ;;
    -t) threads="$2"; shift ;;
    *) echo "❌ Unknown option: $1"; exit 1 ;;
  esac
  shift
done

# =================== STEP 1: NanoFilt ===================
input_dir="1_Sample"
output_dir="2_NanoFilt_output"
mkdir -p "$output_dir"

echo "🔹 STEP 1: Quality filtering with NanoFilt..."
for fastq_file in "$input_dir"/*.fastq.gz; do
  base_name=$(basename "$fastq_file" .fastq.gz)
  output_file="$output_dir/${base_name}_filtered.fastq"
  gunzip -c "$fastq_file" | NanoFilt -q "$quality_threshold" -l "$min_length" --maxlength "$max_length" > "$output_file"
  echo "✔ Processed: $base_name"
done

# =================== STEP 2: Cutadapt ===================
INPUT_DIR="$output_dir"
OUTPUT_DIR="3_cutadapt_output"
mkdir -p "$OUTPUT_DIR"

primer_rev_rc=$(echo "$primer_rev" | rev | tr "ACGT" "TGCA")

echo "🔹 STEP 2: Primer trimming with Cutadapt..."
for file in "$INPUT_DIR"/*.fastq; do
  base=$(basename "$file" .fastq)
  output_file="$OUTPUT_DIR/${base}_trimmed.fastq"
  cutadapt -g "$primer_fwd"..."$primer_rev_rc" -e "$cutadapt_error" \
           -m "$cutadapt_minlen" -M "$cutadapt_maxlen" \
           --discard-untrimmed -o "$output_file" "$file"
  echo "✔ Cutadapt done: $base"
done

# =================== STEP 3: FASTQ to FASTA ===================
input_dir="$OUTPUT_DIR"
output_dir="4_combined_fasta"
mkdir -p "$output_dir"

echo "🔹 STEP 3: Converting FASTQ to FASTA..."
for fq in "$input_dir"/*.fastq; do
  base=$(basename "$fq" .fastq)
  fa="$output_dir/${base}.fasta"
  seqtk seq -A "$fq" > "$fa"
done

# =================== STEP 4: Rename FASTA ===================
input_dir="$output_dir"
output_dir="5_vsearch/rename_fasta"
mkdir -p "$output_dir"

echo "🔹 STEP 4: Renaming FASTA headers..."
for fa in "$input_dir"/*.fasta; do
  base=$(basename "$fa" .fasta)
  out="$output_dir/${base}_rename.fasta"
  seq_count=$(grep -c "^>" "$fa")
  {
    for i in $(seq 1 $seq_count); do
      echo "$base;$i"
    done
  } | paste - <(grep -v "^>" "$fa") | sed -e 's/^/>/' -e 's/\t/\n/' > "$out"
done

# =================== STEP 5: VSEARCH Processing ===================
mkdir -p "$output_dir/combine"
cat "$output_dir"/*.fasta > "$output_dir/combine/combine.fasta"

echo "🔹 STEP 5: Dereplication and clustering with VSEARCH..."
vsearch --derep_fulllength "$output_dir/combine/combine.fasta" \
        --output "$output_dir/combine/dereplicated.fasta" --sizeout

vsearch --cluster_fast "$output_dir/combine/dereplicated.fasta" \
        --centroids "$output_dir/combine/clustered.fasta" \
        --id "$vsearch_id" --sizein --sizeout

vsearch --uchime_denovo "$output_dir/combine/clustered.fasta" \
        --chimeras "$output_dir/combine/chimeras.fasta" \
        --nonchimeras "$output_dir/combine/nonchimeras.fasta"

sed 's/;/_/g' "$output_dir/combine/nonchimeras.fasta" > "$output_dir/combine/nonchimeras_clean.fasta"

# =================== STEP 6: OTU Table ===================
echo "🔹 STEP 6: OTU table generation..."
vsearch --usearch_global "$output_dir/combine/combine.fasta" \
        --db "$output_dir/combine/nonchimeras_clean.fasta" \
        --id "$vsearch_id" --otutabout otu_table.tsv \
        --threads "$threads" --sizein --strand plus

# =================== STEP 7: BLAST ===================
echo "🔹 STEP 7: BLASTn taxonomic assignment..."
makeblastdb -in database/database.fasta -dbtype nucl -out database/database

blastn -query "$output_dir/combine/nonchimeras_clean.fasta" \
       -db database/database \
       -evalue "$blast_evalue" \
       -out result_blastn.txt \
       -outfmt "6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore" \
       -num_threads "$threads" \
       -strand both -dust yes -max_target_seqs "$blast_max_target" \
       -perc_identity "$blast_identity" \
       -qcov_hsp_perc "$blast_qcov"

echo "✅ Pipeline completed successfully!"

